import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "org.openapi.generator"
    id "net.ltgt.apt-eclipse"
    id "net.ltgt.apt-idea"
    id "net.ltgt.apt"
    id "org.sonarqube"
    id "com.github.spotbugs"
    id 'checkstyle'
    id 'pmd'
    id 'war'
    id "io.spring.dependency-management"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.icthh.xm.tmf.ms.communication"

description = ""

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
assert System.properties["java.specification.version"] == "11" || "12" || "13"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/swagger.gradle"
apply from: "gradle/version.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

// See https://virgo47.wordpress.com/2018/09/14/classpath-too-long-with-spring-boot-and-gradle/ for details
// https://github.com/jhipster/generator-jhipster/issues/9713
if (OperatingSystem.current().isWindows()) {
    task classpathJar(type: Jar) {
        inputs.files sourceSets.main.runtimeClasspath

        archiveFileName = "runboot-classpath.jar"
        doFirst {
            manifest {
                def classpath = sourceSets.main.runtimeClasspath.files
                attributes "Class-Path": classpath.collect {f -> f.toURI().toString()}.join(" ")
            }
        }
    }

    bootRun {
        classpath = classpathJar.outputs.files
    }
}

bootWar {
    mainClassName = 'com.icthh.xm.tmf.ms.communication.CommunicationApp'
    manifest {
        attributes(
            "Implementation-Version": archiveVersion
        )
    }
}

defaultTasks "bootWar"

springBoot {
    mainClassName = "com.icthh.xm.tmf.ms.communication.CommunicationApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        exceptionFormat = 'full'
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = true
}

task cucumberTest(type: Test) {
    description = "Execute cucumber BDD tests."
    group = "verification"
    include "**/*CucumberIT*"

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = true
    testLogging {
        events = ["passed", "failed", "skipped", "standardOut", "standardError"]
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

check.dependsOn cucumberTest

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task cucumberTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn cucumberTest
}


checkstyle {
    toolVersion = "${checkstyle_version}"
    ignoreFailures = true
    configFile = rootProject.file('./qa/checkstyle.xml')
}

spotbugs {
    ignoreFailures = true
}

pmd {
    rulePriority = 3
    toolVersion = "${pmd_version}"
    ignoreFailures = true
    ruleSetFiles = files("./qa/pmd.xml")
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    // import JHipster dependencies BOM
    implementation platform("io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}" )

    // Use ", version: jhipster_dependencies_version, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation group: "io.github.jhipster", name: "jhipster-framework"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "net.logstash.logback:logstash-logback-encoder"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner"
    implementation "org.openapitools:jackson-databind-nullable:${jackson_databind_nullable_version}"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io"
    implementation "javax.transaction:javax.transaction-api"
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.zalando:problem-spring-web"
    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-discovery"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-config"
    implementation "org.springframework.cloud:spring-cloud-security"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security.oauth:spring-security-oauth2"
    implementation "org.springframework.security:spring-security-jwt"
    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    runtimeOnly "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    implementation ("io.springfox:springfox-swagger2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "com.jayway.jsonpath:json-path"
    testImplementation "io.cucumber:cucumber-junit"
    testImplementation "io.cucumber:cucumber-spring"
    testImplementation ("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunit_junit5_version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunit_junit5_version}"
    testImplementation "org.assertj:assertj-core"
    testImplementation "junit:junit"
    testImplementation "org.mockito:mockito-core:3.2.4"
    testImplementation "org.hamcrest:hamcrest-library"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here

    // XM custom dependencies
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"

    annotationProcessor "javax.xml.bind:jaxb-api:2.3.1"
    implementation "com.sun.xml.bind:jaxb-impl:2.3.2"
    implementation "com.sun.xml.bind:jaxb-core:2.3.0.1"

    annotationProcessor "javax.annotation:javax.annotation-api:1.3.2"

    implementation "org.jsmpp:jsmpp:${jsmpp_version}"
    implementation "com.github.pengrad:java-telegram-bot-api:${telegrambots_version}"

    implementation "io.dropwizard.metrics:metrics-json"
    implementation "io.dropwizard.metrics:metrics-jvm"
    implementation "io.dropwizard.metrics:metrics-servlet"
    implementation "io.dropwizard.metrics:metrics-servlets"

    implementation "org.springframework.cloud:spring-cloud-stream"
    implementation "org.springframework.cloud:spring-cloud-stream-binder-kafka"

    implementation "com.icthh.xm.commons:xm-commons-logging-web:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-security:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-lep:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-ms-web:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-permission:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-metric:${xm_commons_version}"
    implementation "com.icthh.xm.commons:xm-commons-topic:${xm_commons_version}"

    implementation "org.eclipse.jgit:org.eclipse.jgit:${jgit_version}"
    implementation "com.ryantenney.metrics:metrics-spring:${metrics_spring_version}"
    implementation "io.netty:netty-common:${netty_common_version}"

    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testImplementation "com.github.stefanbirkner:system-rules:${system_rules_version}"
    testImplementation "org.testcontainers:testcontainers:${testcontainers_version}"
    testImplementation "org.springframework.cloud:spring-cloud-stream-test-support"
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "6.0.1"
}

compileJava {
    dependsOn processResources
    // add method parameters names to .class (used by LEP scripts)
    options.compilerArgs << '-parameters'
}
processResources.dependsOn cleanResources,bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources